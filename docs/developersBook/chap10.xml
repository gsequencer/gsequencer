<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (C) 2005-2018 Jo\u00EBl Kr\u00E4hemann -->
<!-- Permission is granted to copy, distribute and/or modify this document -->
<!-- under the terms of the GNU Free Documentation License, Version 1.3 -->
<!-- or any later version published by the Free Software Foundation; -->
<!-- with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. -->
<!-- A copy of the license is included in the section entitled "GNU -->
<!-- Free Documentation License". -->

<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
  <title>Advanced Gtk+ Sequencer's fx engine</title>
  <para>
    There a well know set of recalls described here. Additionally you might
    want to take advantage of recalls interfacing plugin APIs like LADSPA, DSSI
    or LV2. You can instantiate them simply with
    <code language="C">GList* ags_fx_factory_create(AgsAudio*, AgsRecallContainer*, AgsRecallContainer*, gchar*, gchar *, gchar *, guint, guint, guint, guint, gint, guint, guint)</code>
  </para>

  <example>
    <title>Using ags_fx_factory_create()</title>
    <programlisting language="C">
<xi:include href="../listings/fx_factory.c" parse="text" />
    </programlisting>
  </example>

  <variablelist>    
    <varlistentry>
      <term>
	<code>ags-fx-buffer</code>
      </term>
      <listitem>
	<para>
	  Buffer audio data, produces new destination as on source occurs
	  AgsRecycling::add_audio_signal().	  
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-playback</code>
      </term>
      <listitem>
	<para>
	  Play or capture audio data and store it in wave objects.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-volume</code>
      </term>
      <listitem>
	<para>
	  Adjust volume of audio data.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-peak</code>
      </term>
      <listitem>
	<para>
	  Calculate peak of audio data.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-eq10</code>
      </term>
      <listitem>
	<para>
	  Adjust 10 band equalizer.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-analyse</code>
      </term>
      <listitem>
	<para>
	  Get frequency hints using FFTW3.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-envelope</code>
      </term>
      <listitem>
	<para>
	  Apply envelope data per piano roll note or pattern note.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-pattern</code>
      </term>
      <listitem>
	<para>
	  Play audio data based on boolean patterns.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-notation</code>
      </term>
      <listitem>
	<para>
	  Play, capture and feed audio data based on notation.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-ladspa</code>
      </term>
      <listitem>
	<para>
	  Interface LADSPA plugins.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-dssi</code>
      </term>
      <listitem>
	<para>
	  Interface DSSI plugins.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<code>ags-fx-lv2</code>
      </term>
      <listitem>
	<para>
	  Interface LV2 plugins.
	</para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term>
	<code>ags-fx-vst3</code>
      </term>
      <listitem>
	<para>
	  Interface VST3 plugins - requires libags-vst.so to be available.
	</para>
      </listitem>
    </varlistentry>
 </variablelist>
</chapter>
