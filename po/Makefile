# Makefile for PO directory in any package using GNU gettext.
# Copyright (C) 1995-1997, 2000-2007, 2009-2010 by Ulrich Drepper <drepper@gnu.ai.mit.edu>
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#
# Origin: gettext-0.19.8
GETTEXT_MACRO_VERSION = 0.19

PACKAGE = gsequencer
VERSION = 4.2.2
PACKAGE_BUGREPORT = jkraehemann@gmail.com

SED = /usr/bin/sed
SHELL = /bin/sh


srcdir = .
top_srcdir = ..


prefix = /usr/local
exec_prefix = ${prefix}
datarootdir = ${prefix}/share
datadir = ${datarootdir}
localedir = ${datarootdir}/locale
gettextsrcdir = $(datadir)/gettext/po

INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644

# We use $(mkdir_p).
# In automake <= 1.9.x, $(mkdir_p) is defined either as "mkdir -p --" or as
# "$(mkinstalldirs)" or as "$(install_sh) -d". For these automake versions,
# ${SHELL} /home/joelkraehemann/savannah/gsequencer/install-sh does not start with $(SHELL), so we add it.
# In automake >= 1.10, $(MKDIR_P) is derived from ${MKDIR_P}, which is defined
# either as "/path/to/mkdir -p" or ".../install-sh -c -d". For these automake
# versions, $(mkinstalldirs) and $(install_sh) are unused.
mkinstalldirs = $(SHELL) ${SHELL} /home/joelkraehemann/savannah/gsequencer/install-sh -d
install_sh = $(SHELL) ${SHELL} /home/joelkraehemann/savannah/gsequencer/install-sh
MKDIR_P = /usr/bin/mkdir -p
mkdir_p = $(MKDIR_P)

# When building gettext-tools, we prefer to use the built programs
# rather than installed programs.  However, we can't do that when we
# are cross compiling.
CROSS_COMPILING = @CROSS_COMPILING@

GMSGFMT_ = /usr/bin/msgfmt
GMSGFMT_no = /usr/bin/msgfmt
GMSGFMT_yes = /usr/bin/msgfmt
GMSGFMT = $(GMSGFMT_$(USE_MSGCTXT))
MSGFMT_ = /usr/bin/msgfmt
MSGFMT_no = /usr/bin/msgfmt
MSGFMT_yes = /usr/bin/msgfmt
MSGFMT = $(MSGFMT_$(USE_MSGCTXT))
XGETTEXT_ = /usr/bin/xgettext
XGETTEXT_no = /usr/bin/xgettext
XGETTEXT_yes = /usr/bin/xgettext
XGETTEXT = $(XGETTEXT_$(USE_MSGCTXT))
MSGMERGE = msgmerge
MSGMERGE_UPDATE = /usr/bin/msgmerge --update
MSGINIT = msginit
MSGCONV = msgconv
MSGFILTER = msgfilter

POFILES =  de.po fr.po it.po pl.po
GMOFILES =  de.gmo fr.gmo it.gmo pl.gmo
UPDATEPOFILES =  de.po-update fr.po-update it.po-update pl.po-update
DUMMYPOFILES =  de.nop fr.nop it.nop pl.nop
DISTFILES.common = Makefile.in.in remove-potcdate.sin \
$(DISTFILES.common.extra1) $(DISTFILES.common.extra2) $(DISTFILES.common.extra3)
DISTFILES = $(DISTFILES.common) Makevars POTFILES.in \
$(POFILES) $(GMOFILES) \
$(DISTFILES.extra1) $(DISTFILES.extra2) $(DISTFILES.extra3)

POTFILES = \
     ../ags/app/ags_connection_editor_bulk.c \
     ../ags/app/ags_animation_window.c \
     ../ags/app/ags_server_preferences.c \
     ../ags/app/ags_plugin_preferences.c \
     ../ags/app/ags_gsequencer_application_callbacks.c \
     ../ags/app/ags_export_window_callbacks.c \
     ../ags/app/ags_vst3_browser.c \
     ../ags/app/ags_machine_callbacks.c \
     ../ags/app/ags_pad_callbacks.c \
     ../ags/app/ags_sequencer_editor_callbacks.c \
     ../ags/app/ags_link_editor_callbacks.c \
     ../ags/app/ags_machine_util.c \
     ../ags/app/ags_generic_preferences_callbacks.c \
     ../ags/app/ags_machine_editor_dialog.c \
     ../ags/app/ags_ui_provider.c \
     ../ags/app/ags_quit_dialog.c \
     ../ags/app/ags_connection_editor.c \
     ../ags/app/ags_gsequencer_application_context.c \
     ../ags/app/ags_server_preferences_callbacks.c \
     ../ags/app/ags_generic_preferences.c \
     ../ags/app/ags_connection_editor_line_callbacks.c \
     ../ags/app/ags_machine_counter_manager.c \
     ../ags/app/ags_pcm_file_chooser_dialog.c \
     ../ags/app/ags_performance_preferences.c \
     ../ags/app/ags_audio_preferences_callbacks.c \
     ../ags/app/ags_machine_editor_line.c \
     ../ags/app/ags_bulk_member.c \
     ../ags/app/ags_effect_pad.c \
     ../ags/app/ags_composite_editor.c \
     ../ags/app/ags_vst3_browser_callbacks.c \
     ../ags/app/export/ags_wave_export_dialog_callbacks.c \
     ../ags/app/export/ags_machine_collection.c \
     ../ags/app/export/ags_midi_export_wizard.c \
     ../ags/app/export/ags_machine_collection_callbacks.c \
     ../ags/app/export/ags_machine_mapper_callbacks.c \
     ../ags/app/export/ags_midi_export_wizard_callbacks.c \
     ../ags/app/export/ags_wave_export_dialog.c \
     ../ags/app/export/ags_machine_mapper.c \
     ../ags/app/ags_machine_editor_listing_callbacks.c \
     ../ags/app/ags_window_callbacks.c \
     ../ags/app/ags_link_editor.c \
     ../ags/app/ags_input_dialog.c \
     ../ags/app/ags_line_member.c \
     ../ags/app/ags_effect_bulk_entry.c \
     ../ags/app/ags_sequencer_editor.c \
     ../ags/app/editor/ags_machine_selector.c \
     ../ags/app/editor/ags_ramp_acceleration_dialog_callbacks.c \
     ../ags/app/editor/ags_envelope_info.c \
     ../ags/app/editor/ags_position_wave_cursor_dialog.c \
     ../ags/app/editor/ags_notation_meta_callbacks.c \
     ../ags/app/editor/ags_position_notation_cursor_dialog.c \
     ../ags/app/editor/ags_ramp_acceleration_dialog.c \
     ../ags/app/editor/ags_position_sheet_cursor_dialog.c \
     ../ags/app/editor/ags_envelope_editor_callbacks.c \
     ../ags/app/editor/ags_time_stretch_buffer_dialog.c \
     ../ags/app/editor/ags_crop_note_dialog.c \
     ../ags/app/editor/ags_remove_sheet_page_dialog.c \
     ../ags/app/editor/ags_select_buffer_dialog_callbacks.c \
     ../ags/app/editor/ags_composite_toolbar.c \
     ../ags/app/editor/ags_automation_edit_box.c \
     ../ags/app/editor/ags_position_sheet_cursor_dialog_callbacks.c \
     ../ags/app/editor/ags_position_notation_cursor_dialog_callbacks.c \
     ../ags/app/editor/ags_wave_edit.c \
     ../ags/app/editor/ags_automation_meta.c \
     ../ags/app/editor/ags_machine_selection.c \
     ../ags/app/editor/ags_automation_edit.c \
     ../ags/app/editor/ags_automation_edit_callbacks.c \
     ../ags/app/editor/ags_sheet_edit.c \
     ../ags/app/editor/ags_select_acceleration_dialog_callbacks.c \
     ../ags/app/editor/ags_wave_edit_callbacks.c \
     ../ags/app/editor/ags_sheet_edit_callbacks.c \
     ../ags/app/editor/ags_pattern_envelope_callbacks.c \
     ../ags/app/editor/ags_envelope_info_callbacks.c \
     ../ags/app/editor/ags_position_automation_cursor_dialog.c \
     ../ags/app/editor/ags_envelope_dialog_callbacks.c \
     ../ags/app/editor/ags_notation_edit_callbacks.c \
     ../ags/app/editor/ags_scrolled_wave_edit_box.c \
     ../ags/app/editor/ags_scrolled_automation_edit_box.c \
     ../ags/app/editor/ags_move_note_dialog_callbacks.c \
     ../ags/app/editor/ags_select_acceleration_dialog.c \
     ../ags/app/editor/ags_notation_edit.c \
     ../ags/app/editor/ags_select_buffer_dialog.c \
     ../ags/app/editor/ags_pattern_envelope.c \
     ../ags/app/editor/ags_composite_edit.c \
     ../ags/app/editor/ags_wave_meta.c \
     ../ags/app/editor/ags_envelope_dialog.c \
     ../ags/app/editor/ags_automation_meta_callbacks.c \
     ../ags/app/editor/ags_wave_meta_callbacks.c \
     ../ags/app/editor/ags_wave_edit_box.c \
     ../ags/app/editor/ags_time_stretch_buffer_dialog_callbacks.c \
     ../ags/app/editor/ags_notation_meta.c \
     ../ags/app/editor/ags_add_sheet_page_dialog.c \
     ../ags/app/editor/ags_envelope_editor.c \
     ../ags/app/editor/ags_add_sheet_page_dialog_callbacks.c \
     ../ags/app/editor/ags_remove_sheet_page_dialog_callbacks.c \
     ../ags/app/editor/ags_machine_selector_callbacks.c \
     ../ags/app/editor/ags_select_note_dialog_callbacks.c \
     ../ags/app/editor/ags_composite_edit_callbacks.c \
     ../ags/app/editor/ags_move_note_dialog.c \
     ../ags/app/editor/ags_select_note_dialog.c \
     ../ags/app/editor/ags_position_automation_cursor_dialog_callbacks.c \
     ../ags/app/editor/ags_position_wave_cursor_dialog_callbacks.c \
     ../ags/app/editor/ags_machine_radio_button_callbacks.c \
     ../ags/app/editor/ags_machine_radio_button.c \
     ../ags/app/editor/ags_crop_note_dialog_callbacks.c \
     ../ags/app/editor/ags_composite_toolbar_callbacks.c \
     ../ags/app/ags_lv2_browser.c \
     ../ags/app/ags_resize_editor.c \
     ../ags/app/ags_export_soundcard_callbacks.c \
     ../ags/app/ags_preferences_callbacks.c \
     ../ags/app/ags_machine_editor_pad.c \
     ../ags/app/ags_effect_bulk_callbacks.c \
     ../ags/app/ags_navigation.c \
     ../ags/app/ags_navigation_callbacks.c \
     ../ags/app/ags_machine_editor_callbacks.c \
     ../ags/app/ags_line_member_editor.c \
     ../ags/app/osc/controller/ags_ui_osc_renew_controller.c \
     ../ags/app/ags_gsequencer_application.c \
     ../ags/app/ags_online_help_window.c \
     ../ags/app/ags_effect_separator.c \
     ../ags/app/ags_effect_line.c \
     ../ags/app/ags_plugin_preferences_callbacks.c \
     ../ags/app/ags_machine_editor.c \
     ../ags/app/ags_app_action_util.c \
     ../ags/app/ags_quit_dialog_callbacks.c \
     ../ags/app/ags_pad.c \
     ../ags/app/ags_performance_preferences_callbacks.c \
     ../ags/app/ags_connection_editor_pad_callbacks.c \
     ../ags/app/ags_connection_editor_listing_callbacks.c \
     ../ags/app/ags_window.c \
     ../ags/app/ags_osc_server_preferences.c \
     ../ags/app/ags_midi_dialog.c \
     ../ags/app/ags_connection_editor_pad.c \
     ../ags/app/ags_audio_preferences.c \
     ../ags/app/ags_soundcard_editor.c \
     ../ags/app/machine/ags_matrix_callbacks.c \
     ../ags/app/machine/ags_ffplayer_input_line_callbacks.c \
     ../ags/app/machine/ags_drum_output_line.c \
     ../ags/app/machine/ags_drum_output_pad.c \
     ../ags/app/machine/ags_synth_input_line_callbacks.c \
     ../ags/app/machine/ags_ladspa_bridge.c \
     ../ags/app/machine/ags_hybrid_fm_synth_callbacks.c \
     ../ags/app/machine/ags_ffplayer_bridge.c \
     ../ags/app/machine/ags_hybrid_synth_callbacks.c \
     ../ags/app/machine/ags_panel_input_line.c \
     ../ags/app/machine/ags_fm_synth_input_line_callbacks.c \
     ../ags/app/machine/ags_live_lv2_bridge.c \
     ../ags/app/machine/ags_fm_oscillator_callbacks.c \
     ../ags/app/machine/ags_ffplayer_bridge_callbacks.c \
     ../ags/app/machine/ags_syncsynth_callbacks.c \
     ../ags/app/machine/ags_synth_input_line.c \
     ../ags/app/machine/ags_mixer_callbacks.c \
     ../ags/app/machine/ags_equalizer10_callbacks.c \
     ../ags/app/machine/ags_cell_pattern_callbacks.c \
     ../ags/app/machine/ags_dssi_bridge.c \
     ../ags/app/machine/ags_vst3_bridge_callbacks.c \
     ../ags/app/machine/ags_drum_input_pad.c \
     ../ags/app/machine/ags_matrix.c \
     ../ags/app/machine/ags_equalizer10.c \
     ../ags/app/machine/ags_panel_callbacks.c \
     ../ags/app/machine/ags_drum_input_line_callbacks.c \
     ../ags/app/machine/ags_fm_synth.c \
     ../ags/app/machine/ags_pitch_sampler_file_callbacks.c \
     ../ags/app/machine/ags_audiorec_callbacks.c \
     ../ags/app/machine/ags_panel_input_pad.c \
     ../ags/app/machine/ags_fm_synth_callbacks.c \
     ../ags/app/machine/ags_fm_syncsynth_callbacks.c \
     ../ags/app/machine/ags_drum.c \
     ../ags/app/machine/ags_synth_input_pad.c \
     ../ags/app/machine/ags_spectrometer.c \
     ../ags/app/machine/ags_fm_synth_input_line.c \
     ../ags/app/machine/ags_pattern_box_callbacks.c \
     ../ags/app/machine/ags_oscillator.c \
     ../ags/app/machine/ags_drum_output_line_callbacks.c \
     ../ags/app/machine/ags_lv2_bridge.c \
     ../ags/app/machine/ags_drum_input_pad_callbacks.c \
     ../ags/app/machine/ags_desk_pad.c \
     ../ags/app/machine/ags_live_vst3_bridge_callbacks.c \
     ../ags/app/machine/ags_drum_callbacks.c \
     ../ags/app/machine/ags_matrix_bulk_input_callbacks.c \
     ../ags/app/machine/ags_sfz_synth.c \
     ../ags/app/machine/ags_pitch_sampler.c \
     ../ags/app/machine/ags_live_dssi_bridge.c \
     ../ags/app/machine/ags_desk_pad_callbacks.c \
     ../ags/app/machine/ags_mixer_input_line.c \
     ../ags/app/machine/ags_ladspa_bridge_callbacks.c \
     ../ags/app/machine/ags_audiorec.c \
     ../ags/app/machine/ags_ffplayer_bulk_input_callbacks.c \
     ../ags/app/machine/ags_matrix_bridge.c \
     ../ags/app/machine/ags_fm_syncsynth.c \
     ../ags/app/machine/ags_synth_callbacks.c \
     ../ags/app/machine/ags_ffplayer_input_line.c \
     ../ags/app/machine/ags_ffplayer_input_pad.c \
     ../ags/app/machine/ags_synth.c \
     ../ags/app/machine/ags_sfz_synth_callbacks.c \
     ../ags/app/machine/ags_spectrometer_callbacks.c \
     ../ags/app/machine/ags_mixer.c \
     ../ags/app/machine/ags_lv2_bridge_callbacks.c \
     ../ags/app/machine/ags_desk_callbacks.c \
     ../ags/app/machine/ags_panel.c \
     ../ags/app/machine/ags_drum_input_line.c \
     ../ags/app/machine/ags_live_vst3_bridge.c \
     ../ags/app/machine/ags_syncsynth.c \
     ../ags/app/machine/ags_ffplayer_input_pad_callbacks.c \
     ../ags/app/machine/ags_live_dssi_bridge_callbacks.c \
     ../ags/app/machine/ags_ffplayer_callbacks.c \
     ../ags/app/machine/ags_matrix_bulk_input.c \
     ../ags/app/machine/ags_hybrid_fm_synth.c \
     ../ags/app/machine/ags_mixer_input_pad.c \
     ../ags/app/machine/ags_sf2_synth.c \
     ../ags/app/machine/ags_hybrid_synth.c \
     ../ags/app/machine/ags_pitch_sampler_file.c \
     ../ags/app/machine/ags_ffplayer.c \
     ../ags/app/machine/ags_panel_input_line_callbacks.c \
     ../ags/app/machine/ags_cell_pattern.c \
     ../ags/app/machine/ags_desk.c \
     ../ags/app/machine/ags_ffplayer_bulk_input.c \
     ../ags/app/machine/ags_oscillator_callbacks.c \
     ../ags/app/machine/ags_sf2_synth_callbacks.c \
     ../ags/app/machine/ags_pitch_sampler_callbacks.c \
     ../ags/app/machine/ags_live_lv2_bridge_callbacks.c \
     ../ags/app/machine/ags_matrix_bridge_callbacks.c \
     ../ags/app/machine/ags_drum_output_pad_callbacks.c \
     ../ags/app/machine/ags_fm_synth_input_pad.c \
     ../ags/app/machine/ags_dssi_bridge_callbacks.c \
     ../ags/app/machine/ags_pattern_box.c \
     ../ags/app/machine/ags_desk_file_chooser.c \
     ../ags/app/machine/ags_vst3_bridge.c \
     ../ags/app/machine/ags_fm_oscillator.c \
     ../ags/app/task/ags_simple_file_read.c \
     ../ags/app/task/ags_simple_file_write.c \
     ../ags/app/ags_machine_editor_line_callbacks.c \
     ../ags/app/ags_lv2_browser_callbacks.c \
     ../ags/app/ags_line_member_editor_callbacks.c \
     ../ags/app/ags_composite_editor_callbacks.c \
     ../ags/app/ags_connection_editor_collection_callbacks.c \
     ../ags/app/ags_line_callbacks.c \
     ../ags/app/ags_machine_editor_collection.c \
     ../ags/app/ags_midi_preferences_callbacks.c \
     ../ags/app/ags_ladspa_browser.c \
     ../ags/app/ags_machine_editor_collection_callbacks.c \
     ../ags/app/ags_machine_editor_bulk.c \
     ../ags/app/ags_port_editor_callbacks.c \
     ../ags/app/ags_connection_editor_line.c \
     ../ags/app/ags_osc_server_preferences_callbacks.c \
     ../ags/app/import/ags_midi_import_wizard_callbacks.c \
     ../ags/app/import/ags_track_mapper_callbacks.c \
     ../ags/app/import/ags_track_mapper.c \
     ../ags/app/import/ags_track_collection_callbacks.c \
     ../ags/app/import/ags_track_collection.c \
     ../ags/app/import/ags_midi_import_wizard.c \
     ../ags/app/ags_connection_editor_listing.c \
     ../ags/app/ags_machine.c \
     ../ags/app/ags_connection_editor_collection.c \
     ../ags/app/ags_soundcard_editor_callbacks.c \
     ../ags/app/ags_machine_counter.c \
     ../ags/app/ags_plugin_browser.c \
     ../ags/app/ags_connection_editor_bulk_callbacks.c \
     ../ags/app/ags_midi_preferences.c \
     ../ags/app/ags_effect_bridge_callbacks.c \
     ../ags/app/ags_plugin_browser_callbacks.c \
     ../ags/app/ags_online_help_window_callbacks.c \
     ../ags/app/ags_port_editor.c \
     ../ags/app/ags_bulk_member_callbacks.c \
     ../ags/app/ags_machine_editor_pad_callbacks.c \
     ../ags/app/ags_meta_data_window.c \
     ../ags/app/ags_export_window.c \
     ../ags/app/ags_machine_editor_bulk_callbacks.c \
     ../ags/app/ags_effect_bridge.c \
     ../ags/app/ags_machine_editor_listing.c \
     ../ags/app/file/ags_simple_file.c \
     ../ags/app/ags_effect_pad_callbacks.c \
     ../ags/app/ags_line.c \
     ../ags/app/ags_effect_line_callbacks.c \
     ../ags/app/ags_ladspa_browser_callbacks.c \
     ../ags/app/ags_export_soundcard.c \
     ../ags/app/ags_effect_bulk.c \
     ../ags/app/ags_preferences.c \
     ../ags/app/ags_line_member_callbacks.c \
     ../ags/app/ags_line_member_editor_entry.c \
     ../ags/app/ags_gsequencer_resource.c \
     ../ags/app/ags_connection_editor_callbacks.c \
     ../ags/app/ags_midi_dialog_callbacks.c

CATALOGS =  de.gmo fr.gmo it.gmo pl.gmo

POFILESDEPS_ = $(srcdir)/$(DOMAIN).pot
POFILESDEPS_yes = $(POFILESDEPS_)
POFILESDEPS_no =
POFILESDEPS = $(POFILESDEPS_$(PO_DEPENDS_ON_POT))

DISTFILESDEPS_ = update-po
DISTFILESDEPS_yes = $(DISTFILESDEPS_)
DISTFILESDEPS_no =
DISTFILESDEPS = $(DISTFILESDEPS_$(DIST_DEPENDS_ON_UPDATE_PO))

# Makevars gets inserted here. (Don't remove this line!)
# Makefile variables for PO directory in any package using GNU gettext.
#
# Copyright (C) 2003-2017 Free Software Foundation, Inc.
# This file, Makevars, is free software; the Free Software Foundation
# gives unlimited permission to use, copy, distribute, and modify it.

# Usually the message domain is the same as the package name.
DOMAIN = $(PACKAGE)

# These two variables depend on the location of this directory.
subdir = po
top_builddir = ..

# These options get passed to xgettext.
XGETTEXT_OPTIONS = --keyword=i18n --keyword=i18nM --keyword=i18nP:1,2

# This is the copyright holder that gets inserted into the header of the
# $(DOMAIN).pot file.  Set this to the copyright holder of the surrounding
# package.  (Note that the msgstr strings, extracted from the package's
# sources, belong to the copyright holder of the package.)  Translators are
# expected to transfer the copyright for their translations to this person
# or entity, or to disclaim their copyright.  The empty string stands for
# the public domain; in this case the translators are expected to disclaim
# their copyright.
COPYRIGHT_HOLDER = Joël Krähemann

# This tells whether or not to prepend "GNU " prefix to the package
# name that gets inserted into the header of the $(DOMAIN).pot file.
# Possible values are "yes", "no", or empty.  If it is empty, try to
# detect it automatically by scanning the files in $(top_srcdir) for
# "GNU packagename" string.
PACKAGE_GNU =

# This is the email address or URL to which the translators shall report
# bugs in the untranslated strings:
# - Strings which are not entire sentences, see the maintainer guidelines
#   in the GNU gettext documentation, section 'Preparing Strings'.
# - Strings which use unclear terms or require additional context to be
#   understood.
# - Strings which make invalid assumptions about notation of date, time or
#   money.
# - Pluralisation problems.
# - Incorrect English spelling.
# - Incorrect formatting.
# It can be your email address, or a mailing list address where translators
# can write to without being subscribed, or the URL of a web page through
# which the translators can contact you.
MSGID_BUGS_ADDRESS = jkraehemann@gmail.com

# This is the list of locale categories, beyond LC_MESSAGES, for which the
# message catalogs shall be used.  It is usually empty.
EXTRA_LOCALE_CATEGORIES =

# This tells whether the $(DOMAIN).pot file contains messages with an 'msgctxt'
# context.  Possible values are "yes" and "no".  Set this to yes if the
# package uses functions taking also a message context, like pgettext(), or
# if in $(XGETTEXT_OPTIONS) you define keywords with a context argument.
USE_MSGCTXT = no

# These options get passed to msgmerge.
# Useful options are in particular:
#   --previous            to keep previous msgids of translated messages,
#   --quiet               to reduce the verbosity.
MSGMERGE_OPTIONS =

# These options get passed to msginit.
# If you want to disable line wrapping when writing PO files, add
# --no-wrap to MSGMERGE_OPTIONS, XGETTEXT_OPTIONS, and
# MSGINIT_OPTIONS.
MSGINIT_OPTIONS =

# This tells whether or not to regenerate a PO file when $(DOMAIN).pot
# has changed.  Possible values are "yes" and "no".  Set this to no if
# the POT file is checked in the repository and the version control
# program ignores timestamps.
PO_DEPENDS_ON_POT = yes

# This tells whether or not to forcibly update $(DOMAIN).pot and
# regenerate PO files on "make dist".  Possible values are "yes" and
# "no".  Set this to no if the POT file and PO files are maintained
# externally.
DIST_DEPENDS_ON_UPDATE_PO = yes

.SUFFIXES:
.SUFFIXES: .po .gmo .mo .sed .sin .nop .po-create .po-update

.po.mo:
	@echo "$(MSGFMT) -c -o $@ $<"; \
	$(MSGFMT) -c -o t-$@ $< && mv t-$@ $@

.po.gmo:
	@lang=`echo $* | sed -e 's,.*/,,'`; \
	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
	echo "$${cdcmd}rm -f $${lang}.gmo && $(GMSGFMT) -c --statistics --verbose -o $${lang}.gmo $${lang}.po"; \
	cd $(srcdir) && rm -f $${lang}.gmo && $(GMSGFMT) -c --statistics --verbose -o t-$${lang}.gmo $${lang}.po && mv t-$${lang}.gmo $${lang}.gmo

.sin.sed:
	sed -e '/^#/d' $< > t-$@
	mv t-$@ $@


all: all-yes

all-yes: stamp-po
all-no:

# Ensure that the gettext macros and this Makefile.in.in are in sync.
CHECK_MACRO_VERSION = \
	test "$(GETTEXT_MACRO_VERSION)" = "0.19" \
	  || { echo "*** error: gettext infrastructure mismatch: using a Makefile.in.in from gettext version $(GETTEXT_MACRO_VERSION) but the autoconf macros are from gettext version 0.19" 1>&2; \
	       exit 1; \
	     }

# $(srcdir)/$(DOMAIN).pot is only created when needed. When xgettext finds no
# internationalized messages, no $(srcdir)/$(DOMAIN).pot is created (because
# we don't want to bother translators with empty POT files). We assume that
# LINGUAS is empty in this case, i.e. $(POFILES) and $(GMOFILES) are empty.
# In this case, stamp-po is a nop (i.e. a phony target).

# stamp-po is a timestamp denoting the last time at which the CATALOGS have
# been loosely updated. Its purpose is that when a developer or translator
# checks out the package via CVS, and the $(DOMAIN).pot file is not in CVS,
# "make" will update the $(DOMAIN).pot and the $(CATALOGS), but subsequent
# invocations of "make" will do nothing. This timestamp would not be necessary
# if updating the $(CATALOGS) would always touch them; however, the rule for
# $(POFILES) has been designed to not touch files that don't need to be
# changed.
stamp-po: $(srcdir)/$(DOMAIN).pot
	@$(CHECK_MACRO_VERSION)
	test ! -f $(srcdir)/$(DOMAIN).pot || \
	  test -z "$(GMOFILES)" || $(MAKE) $(GMOFILES)
	@test ! -f $(srcdir)/$(DOMAIN).pot || { \
	  echo "touch stamp-po" && \
	  echo timestamp > stamp-poT && \
	  mv stamp-poT stamp-po; \
	}

# Note: Target 'all' must not depend on target '$(DOMAIN).pot-update',
# otherwise packages like GCC can not be built if only parts of the source
# have been downloaded.

# This target rebuilds $(DOMAIN).pot; it is an expensive operation.
# Note that $(DOMAIN).pot is not touched if it doesn't need to be changed.
# The determination of whether the package xyz is a GNU one is based on the
# heuristic whether some file in the top level directory mentions "GNU xyz".
# If GNU 'find' is available, we avoid grepping through monster files.
$(DOMAIN).pot-update: $(POTFILES) $(srcdir)/POTFILES.in remove-potcdate.sed
	package_gnu="$(PACKAGE_GNU)"; \
	test -n "$$package_gnu" || { \
	  if { if (LC_ALL=C find --version) 2>/dev/null | grep GNU >/dev/null; then \
		 LC_ALL=C find -L $(top_srcdir) -maxdepth 1 -type f \
			       -size -10000000c -exec grep 'GNU gsequencer' \
			       /dev/null '{}' ';' 2>/dev/null; \
	       else \
		 LC_ALL=C grep 'GNU gsequencer' $(top_srcdir)/* 2>/dev/null; \
	       fi; \
	     } | grep -v 'libtool:' >/dev/null; then \
	     package_gnu=yes; \
	   else \
	     package_gnu=no; \
	   fi; \
	}; \
	if test "$$package_gnu" = "yes"; then \
	  package_prefix='GNU '; \
	else \
	  package_prefix=''; \
	fi; \
	if test -n '$(MSGID_BUGS_ADDRESS)' || test '$(PACKAGE_BUGREPORT)' = '@'PACKAGE_BUGREPORT'@'; then \
	  msgid_bugs_address='$(MSGID_BUGS_ADDRESS)'; \
	else \
	  msgid_bugs_address='$(PACKAGE_BUGREPORT)'; \
	fi; \
	case `$(XGETTEXT) --version | sed 1q | sed -e 's,^[^0-9]*,,'` in \
	  '' | 0.[0-9] | 0.[0-9].* | 0.1[0-5] | 0.1[0-5].* | 0.16 | 0.16.[0-1]*) \
	    $(XGETTEXT) --default-domain=$(DOMAIN) --directory=$(top_srcdir) \
	      --add-comments=TRANSLATORS: $(XGETTEXT_OPTIONS)  \
	      --files-from=$(srcdir)/POTFILES.in \
	      --copyright-holder='$(COPYRIGHT_HOLDER)' \
	      --msgid-bugs-address="$$msgid_bugs_address" \
	    ;; \
	  *) \
	    $(XGETTEXT) --default-domain=$(DOMAIN) --directory=$(top_srcdir) \
	      --add-comments=TRANSLATORS: $(XGETTEXT_OPTIONS)  \
	      --files-from=$(srcdir)/POTFILES.in \
	      --copyright-holder='$(COPYRIGHT_HOLDER)' \
	      --package-name="$${package_prefix}gsequencer" \
	      --package-version='4.2.2' \
	      --msgid-bugs-address="$$msgid_bugs_address" \
	    ;; \
	esac
	test ! -f $(DOMAIN).po || { \
	  if test -f $(srcdir)/$(DOMAIN).pot-header; then \
	    sed -e '1,/^#$$/d' < $(DOMAIN).po > $(DOMAIN).1po && \
	    cat $(srcdir)/$(DOMAIN).pot-header $(DOMAIN).1po > $(DOMAIN).po; \
	    rm -f $(DOMAIN).1po; \
	  fi; \
	  if test -f $(srcdir)/$(DOMAIN).pot; then \
	    sed -f remove-potcdate.sed < $(srcdir)/$(DOMAIN).pot > $(DOMAIN).1po && \
	    sed -f remove-potcdate.sed < $(DOMAIN).po > $(DOMAIN).2po && \
	    if cmp $(DOMAIN).1po $(DOMAIN).2po >/dev/null 2>&1; then \
	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(DOMAIN).po; \
	    else \
	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(srcdir)/$(DOMAIN).pot && \
	      mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
	    fi; \
	  else \
	    mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
	  fi; \
	}

# This rule has no dependencies: we don't need to update $(DOMAIN).pot at
# every "make" invocation, only create it when it is missing.
# Only "make $(DOMAIN).pot-update" or "make dist" will force an update.
$(srcdir)/$(DOMAIN).pot:
	$(MAKE) $(DOMAIN).pot-update

# This target rebuilds a PO file if $(DOMAIN).pot has changed.
# Note that a PO file is not touched if it doesn't need to be changed.
$(POFILES): $(POFILESDEPS)
	@lang=`echo $@ | sed -e 's,.*/,,' -e 's/\.po$$//'`; \
	if test -f "$(srcdir)/$${lang}.po"; then \
	  test -f $(srcdir)/$(DOMAIN).pot || $(MAKE) $(srcdir)/$(DOMAIN).pot; \
	  test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
	  echo "$${cdcmd}$(MSGMERGE_UPDATE) $(MSGMERGE_OPTIONS) --lang=$${lang} $${lang}.po $(DOMAIN).pot"; \
	  cd $(srcdir) \
	    && { case `$(MSGMERGE) --version | sed 1q | sed -e 's,^[^0-9]*,,'` in \
	           '' | 0.[0-9] | 0.[0-9].* | 0.1[0-7] | 0.1[0-7].*) \
	             $(MSGMERGE_UPDATE) $(MSGMERGE_OPTIONS) $${lang}.po $(DOMAIN).pot;; \
	           *) \
	             $(MSGMERGE_UPDATE) $(MSGMERGE_OPTIONS) --lang=$${lang} $${lang}.po $(DOMAIN).pot;; \
	         esac; \
	       }; \
	else \
	  $(MAKE) $${lang}.po-create; \
	fi


install: install-exec install-data
install-exec:
install-data: install-data-yes
	if test "$(PACKAGE)" = "gettext-tools"; then \
	  $(mkdir_p) $(DESTDIR)$(gettextsrcdir); \
	  for file in $(DISTFILES.common) Makevars.template; do \
	    $(INSTALL_DATA) $(srcdir)/$$file \
			    $(DESTDIR)$(gettextsrcdir)/$$file; \
	  done; \
	  for file in Makevars; do \
	    rm -f $(DESTDIR)$(gettextsrcdir)/$$file; \
	  done; \
	else \
	  : ; \
	fi
install-data-no: all
install-data-yes: all
	@catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  dir=$(localedir)/$$lang/LC_MESSAGES; \
	  $(mkdir_p) $(DESTDIR)$$dir; \
	  if test -r $$cat; then realcat=$$cat; else realcat=$(srcdir)/$$cat; fi; \
	  $(INSTALL_DATA) $$realcat $(DESTDIR)$$dir/$(DOMAIN).mo; \
	  echo "installing $$realcat as $(DESTDIR)$$dir/$(DOMAIN).mo"; \
	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
	    if test -n "$$lc"; then \
	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
	         for file in *; do \
	           if test -f $$file; then \
	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
	           fi; \
	         done); \
	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	      else \
	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
	          :; \
	        else \
	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        fi; \
	      fi; \
	      rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
	      ln -s ../LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
	      ln $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
	      cp -p $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
	      echo "installing $$realcat link as $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo"; \
	    fi; \
	  done; \
	done

install-strip: install

installdirs: installdirs-exec installdirs-data
installdirs-exec:
installdirs-data: installdirs-data-yes
	if test "$(PACKAGE)" = "gettext-tools"; then \
	  $(mkdir_p) $(DESTDIR)$(gettextsrcdir); \
	else \
	  : ; \
	fi
installdirs-data-no:
installdirs-data-yes:
	@catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  dir=$(localedir)/$$lang/LC_MESSAGES; \
	  $(mkdir_p) $(DESTDIR)$$dir; \
	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
	    if test -n "$$lc"; then \
	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
	         for file in *; do \
	           if test -f $$file; then \
	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
	           fi; \
	         done); \
	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	      else \
	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
	          :; \
	        else \
	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        fi; \
	      fi; \
	    fi; \
	  done; \
	done

# Define this as empty until I found a useful application.
installcheck:

uninstall: uninstall-exec uninstall-data
uninstall-exec:
uninstall-data: uninstall-data-yes
	if test "$(PACKAGE)" = "gettext-tools"; then \
	  for file in $(DISTFILES.common) Makevars.template; do \
	    rm -f $(DESTDIR)$(gettextsrcdir)/$$file; \
	  done; \
	else \
	  : ; \
	fi
uninstall-data-no:
uninstall-data-yes:
	catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  for lc in LC_MESSAGES $(EXTRA_LOCALE_CATEGORIES); do \
	    rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
	  done; \
	done

check: all

info dvi ps pdf html tags TAGS ctags CTAGS ID:

mostlyclean:
	rm -f remove-potcdate.sed
	rm -f stamp-poT
	rm -f core core.* $(DOMAIN).po $(DOMAIN).1po $(DOMAIN).2po *.new.po
	rm -fr *.o

clean: mostlyclean

distclean: clean
	rm -f Makefile Makefile.in POTFILES *.mo

maintainer-clean: distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	rm -f stamp-po $(GMOFILES)

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
dist distdir:
	test -z "$(DISTFILESDEPS)" || $(MAKE) $(DISTFILESDEPS)
	@$(MAKE) dist2
# This is a separate target because 'update-po' must be executed before.
dist2: stamp-po $(DISTFILES)
	dists="$(DISTFILES)"; \
	if test "$(PACKAGE)" = "gettext-tools"; then \
	  dists="$$dists Makevars.template"; \
	fi; \
	if test -f $(srcdir)/$(DOMAIN).pot; then \
	  dists="$$dists $(DOMAIN).pot stamp-po"; \
	fi; \
	if test -f $(srcdir)/ChangeLog; then \
	  dists="$$dists ChangeLog"; \
	fi; \
	for i in 0 1 2 3 4 5 6 7 8 9; do \
	  if test -f $(srcdir)/ChangeLog.$$i; then \
	    dists="$$dists ChangeLog.$$i"; \
	  fi; \
	done; \
	if test -f $(srcdir)/LINGUAS; then dists="$$dists LINGUAS"; fi; \
	for file in $$dists; do \
	  if test -f $$file; then \
	    cp -p $$file $(distdir) || exit 1; \
	  else \
	    cp -p $(srcdir)/$$file $(distdir) || exit 1; \
	  fi; \
	done

update-po: Makefile
	$(MAKE) $(DOMAIN).pot-update
	test -z "$(UPDATEPOFILES)" || $(MAKE) $(UPDATEPOFILES)
	$(MAKE) update-gmo

# General rule for creating PO files.

.nop.po-create:
	@lang=`echo $@ | sed -e 's/\.po-create$$//'`; \
	echo "File $$lang.po does not exist. If you are a translator, you can create it through 'msginit'." 1>&2; \
	exit 1

# General rule for updating PO files.

.nop.po-update:
	@lang=`echo $@ | sed -e 's/\.po-update$$//'`; \
	if test "$(PACKAGE)" = "gettext-tools" && test "$(CROSS_COMPILING)" != "yes"; then PATH=`pwd`/../src:$$PATH; fi; \
	tmpdir=`pwd`; \
	echo "$$lang:"; \
	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
	echo "$${cdcmd}$(MSGMERGE) $(MSGMERGE_OPTIONS) --lang=$$lang $$lang.po $(DOMAIN).pot -o $$lang.new.po"; \
	cd $(srcdir); \
	if { case `$(MSGMERGE) --version | sed 1q | sed -e 's,^[^0-9]*,,'` in \
	       '' | 0.[0-9] | 0.[0-9].* | 0.1[0-7] | 0.1[0-7].*) \
	         $(MSGMERGE) $(MSGMERGE_OPTIONS) -o $$tmpdir/$$lang.new.po $$lang.po $(DOMAIN).pot;; \
	       *) \
	         $(MSGMERGE) $(MSGMERGE_OPTIONS) --lang=$$lang -o $$tmpdir/$$lang.new.po $$lang.po $(DOMAIN).pot;; \
	     esac; \
	   }; then \
	  if cmp $$lang.po $$tmpdir/$$lang.new.po >/dev/null 2>&1; then \
	    rm -f $$tmpdir/$$lang.new.po; \
	  else \
	    if mv -f $$tmpdir/$$lang.new.po $$lang.po; then \
	      :; \
	    else \
	      echo "msgmerge for $$lang.po failed: cannot move $$tmpdir/$$lang.new.po to $$lang.po" 1>&2; \
	      exit 1; \
	    fi; \
	  fi; \
	else \
	  echo "msgmerge for $$lang.po failed!" 1>&2; \
	  rm -f $$tmpdir/$$lang.new.po; \
	fi

$(DUMMYPOFILES):

update-gmo: Makefile $(GMOFILES)
	@:

# Recreate Makefile by invoking config.status. Explicitly invoke the shell,
# because execution permission bits may not work on the current file system.
# Use /bin/sh, which is the shell determined by autoconf for the use by its
# scripts, not $(SHELL) which is hardwired to /bin/sh and may be deficient.
Makefile: Makefile.in.in Makevars $(top_builddir)/config.status POTFILES.in LINGUAS
	cd $(top_builddir) \
	  && /bin/sh ./config.status $(subdir)/$@.in po-directories

force:

# Tell versions [3.59,3.63) of GNU make not to export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
# This file, Rules-quot, can be copied and used freely without restrictions.
# Special Makefile rules for English message catalogs with quotation marks.

DISTFILES.common.extra1 = quot.sed boldquot.sed en@quot.header en@boldquot.header insert-header.sin Rules-quot

.SUFFIXES: .insert-header .po-update-en

en@quot.po-create:
	$(MAKE) en@quot.po-update
en@boldquot.po-create:
	$(MAKE) en@boldquot.po-update

en@quot.po-update: en@quot.po-update-en
en@boldquot.po-update: en@boldquot.po-update-en

.insert-header.po-update-en:
	@lang=`echo $@ | sed -e 's/\.po-update-en$$//'`; \
	if test "$(PACKAGE)" = "gettext-tools" && test "$(CROSS_COMPILING)" != "yes"; then PATH=`pwd`/../src:$$PATH; GETTEXTLIBDIR=`cd $(top_srcdir)/src && pwd`; export GETTEXTLIBDIR; fi; \
	tmpdir=`pwd`; \
	echo "$$lang:"; \
	ll=`echo $$lang | sed -e 's/@.*//'`; \
	LC_ALL=C; export LC_ALL; \
	cd $(srcdir); \
	if $(MSGINIT) $(MSGINIT_OPTIONS) -i $(DOMAIN).pot --no-translator -l $$lang -o - 2>/dev/null \
	   | $(SED) -f $$tmpdir/$$lang.insert-header | $(MSGCONV) -t UTF-8 | \
	   { case `$(MSGFILTER) --version | sed 1q | sed -e 's,^[^0-9]*,,'` in \
	     '' | 0.[0-9] | 0.[0-9].* | 0.1[0-8] | 0.1[0-8].*) \
	       $(MSGFILTER) $(SED) -f `echo $$lang | sed -e 's/.*@//'`.sed \
	       ;; \
	     *) \
	       $(MSGFILTER) `echo $$lang | sed -e 's/.*@//'` \
	       ;; \
	     esac } 2>/dev/null > $$tmpdir/$$lang.new.po \
	     ; then \
	  if cmp $$lang.po $$tmpdir/$$lang.new.po >/dev/null 2>&1; then \
	    rm -f $$tmpdir/$$lang.new.po; \
	  else \
	    if mv -f $$tmpdir/$$lang.new.po $$lang.po; then \
	      :; \
	    else \
	      echo "creation of $$lang.po failed: cannot move $$tmpdir/$$lang.new.po to $$lang.po" 1>&2; \
	      exit 1; \
	    fi; \
	  fi; \
	else \
	  echo "creation of $$lang.po failed!" 1>&2; \
	  rm -f $$tmpdir/$$lang.new.po; \
	fi

en@quot.insert-header: insert-header.sin
	sed -e '/^#/d' -e 's/HEADER/en@quot.header/g' $(srcdir)/insert-header.sin > en@quot.insert-header

en@boldquot.insert-header: insert-header.sin
	sed -e '/^#/d' -e 's/HEADER/en@boldquot.header/g' $(srcdir)/insert-header.sin > en@boldquot.insert-header

mostlyclean: mostlyclean-quot
mostlyclean-quot:
	rm -f *.insert-header
